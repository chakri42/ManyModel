 {
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
 
 "parameters": {
    "suffixName": {
            "defaultValue": "z25",
            "minLength": 3,
            "maxLength": 10,
            "type": "String",
            "metadata": {
                "description": "Name the suffix between 3-10 characters with only characters and numbers"
            }
        },
         "storageAccountSku": {
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ],
      "type": "String",
      "metadata": {
        "description": "Sku on which to run the Azure Storage account."
      }
    },
    "storageAccountKind": {
      "defaultValue": "StorageV2",
      "allowedValues": [
        "Storage",
        "StorageV2",
        "BlobStorage",
        "FileStorage",
        "BlockBlobStorage"
      ],
      "type": "String",
      "metadata": {
        "description": "Indicates the type of storage account."
      }
    },
   "connections_azureblob_name": {
      "defaultValue": "azureblob",
      "type": "String"
    },
    
      "connections_documentdb_name": {
      "defaultValue": "documentdb",
      "type": "String"
      },
      "storageConnectionName": {
      "defaultValue": "[concat('storageconnection', uniqueString(resourceGroup().id))]",
      "type": "String",
      "metadata": {
        "description": "Name of the Logic Apps API connection used to connect to the Azure Storage account."
      }
    },
    "storageAccountName": {
      "defaultValue": "[concat('storage', uniqueString(resourceGroup().id))]",
      "type": "String",
      "metadata": {
        "description": "Name of the Azure Storage account."
      }
    },
       "connections_documentdb_1_name": {
      "defaultValue": "documentdb-1",
      "type": "String"
    },
     "azureMgmtUri": {
      "defaultValue": "https://management.azure.com:443",
      "type": "String",
      "metadata": {
        "description": "Azure Management URI"
      }
   
  },
     "location": {
      "defaultValue": "[resourceGroup().location]",
      "type": "String",
      "metadata": {
        "description": "Location where resources reside."
      }
    },
    "AllowAll": {
      "type": "string",
      "allowedValues": [
        "true",
        "false"
      ],
      "defaultValue": "false",
      "metadata": {
        "description": "Allow connections from all IP addresses to your workspace's endpoints. You can restrict these permissions to just Azure datacenter IP addresses and/or specific IP address ranges after creating the workspace."
      }
    }
  },

  "variables": {
    "location": "[resourceGroup().location]",
    "rgId": "[resourceGroup().id]",
    "paramName": "[variables('uniqueName')]",
    "storageContainer": "input",
    "storageContainer2": "output",
    "uniqueName": "[substring(uniqueString(variables('rgId')),0,4)]",
    "synapseWorkspaceName": "[concat('synapse-ws-',variables('paramName'))]",
     "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
    "cosmosdbaccountname": "[replace(replace(toLower(concat(concat('cosmosdb',variables('paramName')),variables('uniqueName'))),'-',''),'_','')]",
    "cosmosdbname": "covidformsdata",
    "cosmosdbcontainer1": "container1",
    "cosmosdbcontainer2": "container2",
    "storageName": "[replace(replace(toLower(concat(concat('synapsestrg',variables('paramName')),variables('uniqueName'))),'-',''),'_','')]"
    },
    
    "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "isHnsEnabled": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageName'), '/default/', variables('storageContainer'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "publicAccess": "Container"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storageName'), '/default/', variables('storageContainer2'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "publicAccess": "Container"
      }
    },
     {
      "type": "Microsoft.Synapse/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('synapseWorkspaceName')]",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "defaultDataLakeStorage": {
          "accountUrl": "[concat('https://', variables('storageName') , '.dfs.core.windows.net')]",
          "filesystem": "[variables('storageContainer')]"
        },
        "virtualNetworkProfile": {
          "computeSubnetId": ""
        },
        "sqlAdministratorLogin": "sqladminuser"
      },
      "resources": [
        {
          "condition": "[equals(parameters('AllowAll'),'true')]",
          "type": "firewallrules",
          "apiVersion": "2021-06-01",
          "name": "ipaddress",
          "location": "[variables('location')]",
          "dependsOn": [ "[variables('synapseWorkspaceName')]" ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "255.255.255.255"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Synapse/workspaces/bigDataPools",
      "apiVersion": "2021-06-01",
      "name": "[concat(variables('synapseWorkspaceName'), '/spark1')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Synapse/workspaces', variables('synapseWorkspaceName'))]"
      ],
      "properties": {
        "sparkVersion": "2.4",
        "nodeCount": 3,
        "nodeSize": "Medium",
        "nodeSizeFamily": "MemoryOptimized",
        "autoScale": {
          "enabled": true,
          "minNodeCount": 3,
          "maxNodeCount": 6
        },
        "autoPause": {
          "enabled": true,
          "delayInMinutes": 15
        },
        "isComputeIsolationEnabled": false,
        "sessionLevelPackagesEnabled": false,
        "cacheSize": 0,
        "dynamicExecutorAllocation": {
          "enabled": true
        }
      }
    },
    
    
    {
      "type": "Microsoft.Synapse/workspaces/sqlPools",
      "apiVersion": "2020-12-01",
      "name": "[concat(variables('synapseWorkspaceName'), '/sqlpool1')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Synapse/workspaces',  variables('synapseWorkspaceName'))]"
      ],
      "sku": {
        "name": "DW100c",
        "capacity": 0
      },
      "properties": {
        "status": "Paused",
        "maxSizeBytes": 263882790666240,
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "restorePointInTime": "0001-01-01T00:00:00",
        "creationDate": "2021-04-01T21:06:42.853Z",
        "storageAccountType": "GRS",
        "provisioningState": "Succeeded"
      }
    },
     {
      "name": "[variables('cosmosdbaccountname')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2019-12-12",
      "location": "[variables('location')]",
      "tags": {},
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session",
          "maxStalenessPrefix": 1,
          "maxIntervalInSeconds": 5
        },
        "locations": [
          {
            "locationName": "[variables('location')]",
            "failoverPriority": 0
          }
        ],
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": false
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2021-10-15",
      "name": "[concat(variables('cosmosdbaccountname'), '/', variables('cosmosdbname'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdbaccountname'))]"
      ],
      "properties": {
        "resource": {
          "id": "covidformsdata"
        }
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "name": "[concat(variables('cosmosdbaccountname'), '/', variables('cosmosdbname'), '/', variables('cosmosdbcontainer1'))]",
      "apiVersion": "2021-04-15",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdbaccountname'), variables('cosmosdbname'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cosmosdbcontainer1')]",
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*",
                "indexes": [
                  {
                    "kind": "Hash",
                    "dataType": "String",
                    "precision": -1
                  }
                ]
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          }
        },
        "options": {}
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "name": "[concat(variables('cosmosdbaccountname'), '/', variables('cosmosdbname'), '/', variables('cosmosdbcontainer2'))]",
      "apiVersion": "2021-04-15",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdbaccountname'), variables('cosmosdbname'))]"
      ],
      "properties": {
        "resource": {
          "id": "[variables('cosmosdbcontainer2')]",
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*",
                "indexes": [
                  {
                    "kind": "Hash",
                    "dataType": "String",
                    "precision": -1
                  }
                ]
              }
            ],
            "excludedPaths": [
              {
                "path": "/\"_etag\"/?"
              }
            ]
          }
        },
        "options": {}
      }
   },
   
   {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[parameters('connections_documentdb_name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdbaccountname'))]"
      ],
      "kind": "V1",
      "properties": {
        "displayName": "cosmos",
        "statuses": [
          {
            "status": "Connected"
          }
        ],
        "customParameterValues": {},
        "api": {
          "name": "[parameters('connections_documentdb_name')]",
          "displayName": "Azure Cosmos DB",
          "description": "Azure Cosmos DB is a globally distributed multi-model database service designed to enable you to elastically and independently scale throughput and storage across any number of geographical regions with a comprehensive SLA.",
          "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1530/1.0.1530.2592/', parameters('connections_documentdb_name'), '/icon.png')]",

          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'),  parameters('connections_documentdb_name'))]"
        },
        "parameterValues": {


          "databaseAccount": "[variables('cosmosdbaccountname')]",
          "accessKey": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdbaccountname')), '2015-04-08').primaryMasterKey]"

        },

        "testLinks": [
          {
            "requestUri": "[uri(parameters('azureMgmtUri'), concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/', parameters('connections_documentdb_name'), '/extensions/proxy/testconnection?api-version=2018-07-01-preview'))]",
            "method": "get"
          }
        ]
      }
    },
  
   {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2018-07-01-preview",
      "name": "[parameters('storageConnectionName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ],
      "properties": {
        "api": {
          "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', variables('location'), 'azureblob')]"
        },
        "parameterValues": {
          "accountName": "[variables('storageName')]",
          "accessKey": "[listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value]"
        },
        "testLinks": [
          {
            "requestUri": "[uri(parameters('azureMgmtUri'), concat('subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/', parameters('storageConnectionName'), '/extensions/proxy/testconnection?api-version=2018-07-01-preview'))]",
            "method": "get"
          }
        ]
      }
    },
    

    
   
   {
      "apiVersion": "2020-10-01",
      "name": "pid-cde9ebb2-7587-5acb-9601-d0887a5a4fd2",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    }
  ]
 }
